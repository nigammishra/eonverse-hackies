@property --cube-rotate-x {
    syntax: "<angle>";
    initial-value: 45deg;
    inherits: true;
  }
  @property --cube-rotate-y {
    syntax: "<angle>";
    initial-value: 45deg;
    inherits: true;
  }
  @property --cube-rotate-z {
    syntax: "<angle>";
    initial-value: 0deg;
    inherits: true;
  }
  @property --start-color {
    syntax: "<color>";
    initial-value: black;
    inherits: true;
  }
  @property --end-color {
    syntax: "<color>";
    initial-value: white;
    inherits: true;
  }
  
  :root {
    --start-color: black;
    --end-color: white;
    --color-offset: 12%;
    --cube-rotate-x: 45deg;
    --cube-rotate-y: 45deg;
    --cube-rotate-z: 0deg;
  }
  
  .cube-grid-wrapper {
    --s-base: calc(100vmax / var(--c));
    --s: calc(var(--s-base) - var(--s-base) * 0.25);
    position: absolute;
    width: 100vw;
    height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: #333;
    animation: cube-grid-animation 20s linear infinite;
  }
  
  .cube-grid-scene {
    display: flex;
    flex-direction: column;
    perspective: 100rem;
    gap: calc(var(--s) * 0.2);
  }
  
  .cube-grid-container {
    display: flex;
    gap: calc(var(--s) * 0.42);
  }
  
  .cube-grid-container:nth-child(even) {
    transform: translateX(calc(var(--s) * 0.71));
  }
  
  .cube-grid-cube {
    width: var(--s);
    aspect-ratio: 1;
    transform-style: preserve-3d;
    position: relative;
    background: linear-gradient(var(--cube-rotate-x), var(--start-color) var(--color-offset), var(--end-color));
    animation: cube-grid-rotate 5s ease-in-out infinite;
  }
  
  .cube-grid-top {
    position: absolute;
    inset: 0;
    transform-style: preserve-3d;
    display: grid;
    place-items: center;
  }
  
  .cube-grid-top::before,
  .cube-grid-top::after {
    content: "";
    position: absolute;
    inset: 0;
    transform-style: preserve-3d;
    background: linear-gradient(var(--cube-rotate-y), var(--start-color) var(--color-offset), var(--end-color));
  }
  
  .cube-grid-top::after {
    background: linear-gradient(var(--cube-rotate-z), var(--start-color) var(--color-offset), var(--end-color));
  }
  
  /* @keyframes cube-grid-animation {
    0%, 100% {
      transform: rotateX(0deg) rotateY(0deg);
    }
    50% {
      transform: rotateX(360deg) rotateY(360deg);
    }
  } */
  
  @keyframes cube-grid-rotate {
    0% {
      transform: rotateX(var(--cube-rotate-x)) rotateY(var(--cube-rotate-y));
    }
    50% {
      transform: rotateX(180deg) rotateY(180deg);
    }
    100% {
      transform: rotateX(360deg) rotateY(360deg);
    }
  }
  
  body {
    margin: 0;
    overflow: hidden;
  }
  

  .card-container {
    margin-top: 100px;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .card-3d {
    perspective: 1000px;
  }
  
  .custom-card {
    transform-style: preserve-3d;
    transition: transform 0.5s ease-in-out;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.2);
    border-radius: 10px;
    background: linear-gradient(135deg, #1e3c72, #2a5298);
    color: white;
  }
  
  .card-3d:hover .custom-card {
    transform: rotateY(10deg) rotateX(10deg);
    box-shadow: 0 15px 25px rgba(0, 0, 0, 0.3);
  }
  